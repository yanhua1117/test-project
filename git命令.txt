git--工具，版本控制
GitHub--网站，社交平台，开源项目，远程仓库

git工具：
不同系统，方式不同

创建一个库并克隆至本地文件夹下
命令：
1.访问workspace根目录e盘     cd e:
2.访问workspace下的项目文件  cd workspace/test-project
3.克隆远程库                 git clone https://github.com/yanhua1117/hello-world.git

git--工具，版本控制
GitHub--网站，社交平台，开源项目，远程仓库

git工具：
不同系统，方式不同

创建一个库并克隆至本地文件夹下
命令：
1.访问workspace根目录e盘     cd e:
2.访问workspace下的项目文件  cd workspace/test-project
3.克隆远程库                 git clone https://github.com/yanhua1117/hello-world.git

设置贡献者
命令：
git config --global user.name "yanhua1117"
git config --global user.email ""
查看所有文件：git config --list
查看用户名或者邮箱：git config --global user.name(email)



git 的三个区：工作区 暂存区 版本区
提交文件流程：工作区（修改的文件）----->暂存区（作为过渡层，方便分支处理，防止误操作，保护工作区和版本区）---->版本区

Git 命令：
git status  查看状态
将工作区的文件添加到暂存区：   
git add . （提交所有修改的文件） 或者是 git add demo.html（要添加的文件名）(提交单个修改的文件）-----然后查看是否添加成功：git status 若添加成功，文件名为绿色，不成功为红色
将暂存区文件添加到版本区：
git commit----出现一个添加注释的操作（最好写英文）或者是 git commit -m "注释内容"

**简写：git commit -am "注释内容" （-a是add的操作，-m是添加注释）

对比：
git diff （指工作区和暂存区的差异对比）
git diff --cached 或者是 -- staged（暂存区和版本区的差异对比）
git diff 加分支名称（工作区与版本区差异对比）

撤销：
git reset HEAD 加要撤销的文件名（demo.js）---从暂存区撤销回工作区
git checkout -- demo.js                   ---工作区撤销回暂存区（优先）或者版本区的状态
git commit -m "" --amend                  ---误提交后撤回重新提交的方法

查看提交历史：git log

删除：
工作区的文件可以在文件夹内随意删除
git rm 加文件名    -------将暂存区中的文件删除（前提是工作区的也要删除）
git rm -f 加文件名  -------将工作区和暂存区的都删除
git rm --cached 加文件名  -----只会删除暂存区的文件，工作区不会删除

恢复：
先git log 来查看提交的所有版本，复制版本id（复制一部分就可以）--->
1.git checkout 粘贴id 加要恢复的文件名（demo.js）
2.git reset --hard 加id    ------还原到该id这个版本
3.git reset --hard HEAD^   ------还原上一个版本
  git reset --hard HEAD^2  ------还原到上第二个版本
4.git reflog   -----恢复到从前的版本后想在恢复到后面的（现在的）版本 ----->
  git reset --hard id
  
  
  
同步到远程仓库:
git remote     ------查看仓库名
git remote -v  ------查看仓库名字和地址
git push 加仓库名 加分支名  ------同步到远程仓库

远程库克隆到本地：
git clone 粘贴github中的地址

多人协作解决冲突（同步更新）：
git fetch   ----把远端仓库拉取后不合并，需要手动合并
	先对比  git diff master origin/master
	再合并  git merge origin/master 
git pull    ----把远端仓库拉取并合并


开源项目协作：
fork
pull request


git分支：
查看当前分支： git branch
创建分支： git branch 分支名
切换分支： git checkout 分支名
创建新分支并切换分支： git checkout -b 分支名
合并分支： git merge 分支名
查看已合并的分支： git branch --merge
查看未合并分支： git branch --no-merge
删除已合并分支： git branch -d 分支名
删除未合并分支： git branch -D 分支名

将git上新创建的分支上传到github上：
1.git push origin 新分支名
2.在github上直接创建分支

博客：